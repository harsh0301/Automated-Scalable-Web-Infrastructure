AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create network resources - VPC, Subnets, IGW, Routing Tables
Parameters:
  VpcCIDR:
    Description: CIDR block for this VPC
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PublicSubnet3CIDR:
    Description: IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet1CIDR:
    Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24
  PrivateSubnet2CIDR:
    Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.5.0/24
  PrivateSubnet3CIDR:
    Description: IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.0.6.0/24
  RootVolumeType:
    Description: EBS volume type
    Type: String
    Default: gp2
  RootVolumeSize:
    Description: EBS volume size
    Type: Number
    Default: 20
  instanceType:
    Description: EC2 Instance type
    Type: String
    Default: t2.micro
  imageId: 
    Description: EC2 Instance ID
    Type: String
    Default: ami-08c40ec9ead489470
  S3BucketName:
    Description: S3 Bucket Name
    Type: String
    Default: harshshah-csye6225-neu
  DBName:
    Description: DB Instance Name
    Type: String
    Default: csye6225 
  DBUserName:
    Description: DB Instance UserName
    Type: String
    Default: csye6225
  DBPassword:
    Description: DB Instance Password
    Type: String
    Default: harsh*123
  envName:
    Description: Environment Name
    Type: String
    Default: dev
  DomainName:
    Default: "harshshah.me."
    Type: String
  CertificateARN:
    Description: The ARN for the first certificate
    Type: String
    Default: arn:aws:acm:us-east-1:359745020237:certificate/f20de4e8-db86-4aa7-951f-b08d275abbe5

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet3

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for RDS instances
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
  
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ApplicationSecurityGroup"
      GroupDescription: "Application Security Group"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: databaseSecurityGroup
      GroupDescription: DB Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ApplicationSecurityGroup
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306

  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sdm
  #         Ebs:
  #           VolumeSize: !Ref RootVolumeSize
  #           VolumeType: !Ref RootVolumeType
  #           DeleteOnTermination: true
  #     InstanceType: !Ref instanceType
  #     ImageId: !Ref imageId
  #     SecurityGroupIds:
  #       - !Ref ApplicationSecurityGroup
  #     SubnetId: !Ref PublicSubnet1
  #     IamInstanceProfile: !Ref EC2InstanceProfile
  #     UserData:
  #       Fn::Base64:
  #         !Sub |
  #           #!/bin/bash
  #           sed -i '/scripts-user/c\ - [scripts-user, always]' /etc/cloud/cloud.cfg
  #           cd /var/lib/cloud/scripts/per-boot/
  #           touch reload.sh
  #           cat > /var/lib/cloud/scripts/per-boot/reload.sh << 'EOF'
  #             sudo pm2 reload all --update-env
  #           EOF
  #           cat > /etc/environment << 'EOF'
  #             export USER=${DBUserName}
  #             export PASSWORD=${DBPassword}
  #             export DB=${DBName}
  #             export HOST=${RDSInstance.Endpoint.Address}
  #             export AWS_BUCKET_REGION=${AWS::Region}
  #             export AWS_BUCKET_NAME="${S3BucketName}.${envName}.harshshah.me"
  #           EOF

  #           source /etc/profile
  #           cd /home/ec2-user/webapp
  #           rm -rf node_modules
  #           sudo npm i
  #           sudo apt install amazon-cloudwatch-agent -y
  #           wget https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
  #           #install it
  #           sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
  #           sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
  #               -a fetch-config \
  #               -m ec2 \
  #               -c file:/home/ubuntu/webapp/cloudwatch-config.json \
  #               -s
  #           sudo systemctl enable webapp
  #           sudo systemctl start webapp
  #           sudo pm2 reload all --update-env
  #     Tags:
  #       - Key: EC2
  #         Value: ApplicationServer

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref S3BucketName,'.',!Ref envName,'.harshshah.me' ]]
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: LifeCycleRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 60

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: RDS parameter Group
      Family: mysql8.0
      Parameters: 
        sql_mode: IGNORE_SPACE
      Tags: 
        - Key: RDS-ParameterGroup
          Value: MYSQLDB-ParameterGroup

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Engine: MySQL
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: !Ref DBName
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DBName
      StorageEncrypted: true
      KmsKeyId: !Ref RDSKey
      DBParameterGroupName: !Ref RDSParameterGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  WebAppS3IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            Resource: !Join ['', [!GetAtt 'S3Bucket.Arn','/*' ]]
      Roles:
      - !Ref WebAppS3IAMRole

  WebAppS3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      Description: IAM Role for WebApp and S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  myCloudWatchAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2CloudWatchPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'  
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"   
      Roles:
      - !Ref WebAppS3IAMRole


  EC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Path: "/"
      Roles:
      - !Ref WebAppS3IAMRole
      

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DomainName
      Name: !Ref DomainName
      Comment: DNS name for my instance.
      Type: A
      # TTL: '60'
      AliasTarget:
        HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
        DNSName: !GetAtt 'LoadBalancer.DNSName'

  SNSservice:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: verify_email
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      TopicName: verify_email

  SNStopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          - SNS:DeleteTopic
          - SNS:ListSubscriptionsByTopic
          - SNS:GetTopicAttributes
          - SNS:Receive
          - SNS:AddPermission
          - SNS:Subscribe
          Resource:
            Ref: SNSservice
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref AWS::AccountId
        - Sid: __console_pub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action: SNS:Publish
          Resource:
            Ref: SNSservice
        - Sid: __console_sub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Subscribe
          - SNS:Receive
          Resource:
            Ref: SNSservice
      Topics:
      - Ref: SNSservice

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SNSservice

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: emailVerify
      Role:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - !Ref AWS::AccountId
          - ":role/"
          - !Ref LambdaRole
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('In Lambda function');
          exports.handler=function(event,context,callback){
            console.log('Message from SNS');
            var message = event.Records[0].Sns.Message;
            callback(null,"Success");
          };
      Description: Function to store token in dynamodb and send email to SNS

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "Email"
          AttributeType: "S"
        - 
          AttributeName: "TokenName"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "Email"
          KeyType: "HASH"
        - 
          AttributeName: "TokenName"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: csye-6225
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      Tags:
        - Key: key
          Value: value

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LambdaFunctionRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'      
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        
  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeTimeToLive'
            Resource: 
              - '*'
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:BatchGet*'
            Resource:
              - !GetAtt DynamodbTable.Arn
      Roles:
        - !Ref WebAppS3IAMRole
        - !Ref LambdaRole

# Create Load Balancer Security Group
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp 
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

# Create Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-LoadBalancer'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      IpAddressType: ipv4
      Type: application
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'

# Create Auto Scaling Group with Launch Template
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EC2LaunchTemplate
      - LoadBalancerTargetGroup
    Properties:
      AutoScalingGroupName: !Sub '${AWS::StackName}-auto-scaling-group'
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 3
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Cooldown: '300'
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub '${AWS::StackName}-auto-scaling-group'
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup


  # Create Auto Scaling Policy for Scaling Out
  EC2AutoScalingPolicyForScalingOut:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '1'
      AutoScalingGroupName: !Ref EC2AutoScalingGroup

  AvgCPUUp:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: !Sub '${AWS::StackName}-AVGCPUUP'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 5.0
      AlarmActions:
        - !Ref EC2AutoScalingPolicyForScalingOut
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EC2AutoScalingGroup
  
  EC2AutoScalingPolicyForScalingIn:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '-1'
      AutoScalingGroupName: !Ref EC2AutoScalingGroup

  AvgCPUDown:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: !Sub '${AWS::StackName}-AVGCPUDOWN'
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 3.0
      AlarmActions:
        - !Ref EC2AutoScalingPolicyForScalingIn
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EC2AutoScalingGroup

  IAMInstanceProfile: 
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Path: /
      Roles: 
        - Ref: WebAppS3IAMRole


  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: LaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - IAMInstanceProfile
            - Arn
        ImageId: !Ref imageId
        InstanceType: !Ref instanceType
        KeyName: aws
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
        BlockDeviceMappings:
          - DeviceName: "/dev/sdm"
            Ebs:
              VolumeSize: 20
              VolumeType: "gp2"
              DeleteOnTermination: true
              Encrypted: true
              KmsKeyId: !Ref EBSkey
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              sed -i '/scripts-user/c\ - [scripts-user, always]' /etc/cloud/cloud.cfg
              cd /var/lib/cloud/scripts/per-boot/
              touch reload.sh
              cat > /var/lib/cloud/scripts/per-boot/reload.sh << 'EOF'
                sudo pm2 reload all --update-env
              EOF
              cat > /etc/environment << 'EOF'
                export USER=${DBUserName}
                export PASSWORD=${DBPassword}
                export DB=${DBName}
                export HOST=${RDSInstance.Endpoint.Address}
                export AWS_BUCKET_REGION=${AWS::Region}
                export AWS_BUCKET_NAME="${S3BucketName}.${envName}.harshshah.me"
              EOF

              source /etc/profile
              cd /home/ec2-user/webapp
              rm -rf node_modules
              sudo npm i
              sudo apt install amazon-cloudwatch-agent -y
              wget https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
              #install it
              sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                  -a fetch-config \
                  -m ec2 \
                  -c file:/home/ubuntu/webapp/cloudwatch-config.json \
                  -s
              sudo systemctl enable webapp
              sudo systemctl start webapp
              sudo pm2 reload all --update-env

# Create Target Group for Load Balancer
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TargetGroup'
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref myVPC
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      IpAddressType: ipv4
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'


  # Create Listener for Load Balancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: CertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  EBSkey:
    Type: AWS::KMS::Key
    Properties:
      Description: A symmetric key for encryption of EBS
      KeyPolicy:
        Id: key-default-ebs
        Version: "2012-10-17"
        Statement:
          - Sid: Enabling Key to the resource
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::359745020237:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
                - arn:aws:iam::359745020237:root
            Action: 'kms:*'
            Resource: '*'

  RDSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A symmetric key for encryption of RDS
      KeyPolicy:
        Id: key-default-rds
        Version: "2012-10-17"
        Statement:
          - Sid: Enabling Key to the resource
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::359745020237:root
            Action: 'kms:*'
            Resource: '*'